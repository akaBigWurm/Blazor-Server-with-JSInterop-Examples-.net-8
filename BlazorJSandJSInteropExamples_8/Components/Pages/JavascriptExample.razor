@page "/"

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Text Processor</title>
    <!-- Include Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
          rel="stylesheet"
          crossorigin="anonymous" />
</head>
<body>
    <div class="container my-4">
        <!-- Title -->
        <h3 class="mb-4">Text Processor</h3>

        <!-- Textarea with 2 Rows and 300 Character Limit -->
        <div class="mb-2">
            <textarea id="inputText"
                      class="form-control"
                      rows="2"
                      placeholder="Type your text here..."
                      onkeydown="handleKeyDown(event)"
                      oninput="updateCharacterCount()"
                      maxlength="300"
                      autofocus></textarea>
            <!-- Character Counter -->
            <small id="charCount" class="form-text text-muted">0 / 300 characters</small>
        </div>

        <!-- Buttons below the textarea -->
        <div class="btn-group mb-3" role="group" aria-label="Action buttons">
            <button type="button" class="btn btn-secondary" onclick="clearInputText()">Clear</button>
            <button type="button" class="btn btn-secondary" onclick="pasteFromClipboard()">Paste</button>
            <button type="button" class="btn btn-secondary" onclick="processText()">Process Text</button>
        </div>

        <!-- Error Message as a Bootstrap Alert -->
        <div id="errorMessage" class="alert alert-danger d-none" role="alert">
            <!-- Error message will be inserted here dynamically -->
        </div>

        <!-- Loading Spinner -->
        <div id="loadingSpinner" class="spinner-border text-primary d-none" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>

        <!-- Processed Text Section -->
        <div id="processedTextSection" class="result-section mt-4" style="display: none;">
            <h2 class="result-title">Processed Text:</h2>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Text</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="processedText"></tbody>
            </table>
        </div>

    </div>

    <!-- Include Bootstrap JS (optional, for interactive components) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
            crossorigin="anonymous"></script>

    <script>
        // Mock function that simulates an asynchronous API call to process text.
        async function mockProcessText(inputText) {
            // Simulate delay
            return new Promise((resolve) => {
                setTimeout(() => {
                    // Return an object with "processed_text" key
                    // This could be a call to an API
                    resolve({ processed_text: "Mock processed text: " + inputText });
                }, 1000); // 1-second delay to simulate processing time
            });
        }

        // Main function to process the text
        async function processText() {
            const inputText = document.getElementById("inputText").value.trim();
            const errorMessageElement = document.getElementById("errorMessage");
            const loadingSpinner = document.getElementById("loadingSpinner");
            const processedTextSection = document.getElementById("processedTextSection");
            const processedTextElement = document.getElementById("processedText");

            // Reset messages and sections
            errorMessageElement.classList.add("d-none");
            errorMessageElement.innerText = "";
            loadingSpinner.classList.remove("d-none");
            processedTextSection.style.display = "none";
            processedTextElement.innerHTML = "";

            // Validate input
            if (!inputText) {
                displayError("Please enter some text.");
                loadingSpinner.classList.add("d-none");
                return;
            }

            try {
                // Call the mock function instead of a real API
                const result = await mockProcessText(inputText);
                loadingSpinner.classList.add("d-none");

                // Display the "Processed Text"
                const textRow = document.createElement("tr");

                const textCell = document.createElement("td");
                textCell.className = "align-middle";
                textCell.innerText = result.processed_text || "No processed text available.";
                textRow.appendChild(textCell);

                const buttonCell = document.createElement("td");
                buttonCell.className = "align-middle";
                const copyButton = document.createElement("button");
                copyButton.innerText = "Copy";
                copyButton.className = "btn btn-primary btn-sm";
                copyButton.onclick = () => {
                    navigator.clipboard
                        .writeText(result.processed_text)
                        .then(() => alert("Processed text copied to clipboard!"))
                        .catch((err) => alert("Failed to copy text: " + err));
                };
                buttonCell.appendChild(copyButton);
                textRow.appendChild(buttonCell);

                processedTextElement.appendChild(textRow);
                processedTextSection.style.display = "block";
            } catch (error) {
                loadingSpinner.classList.add("d-none");
                displayError("An error occurred while processing your request.");
                console.error(error);
            }
        }

        // Handle Enter keydown to process text
        function handleKeyDown(event) {
            if (event.key === "Enter" && !event.shiftKey) {
                event.preventDefault();
                processText();
            }
        }

        // Function to paste text from the clipboard
        async function pasteFromClipboard() {
            try {
                const text = await navigator.clipboard.readText();
                const trimmedText = text.length > 300 ? text.substring(0, 300) : text;
                document.getElementById("inputText").value = trimmedText;
                updateCharacterCount();
                processText(); // Trigger text processing after pasting
            } catch (err) {
                displayError("Failed to paste: " + err.message);
            }
        }

        // Function to clear input and results
        function clearInputText() {
            document.getElementById("inputText").value = "";
            document.getElementById("processedText").innerHTML = "";
            document.getElementById("processedTextSection").style.display = "none";

            const errorMessageElement = document.getElementById("errorMessage");
            errorMessageElement.classList.add("d-none");
            errorMessageElement.innerText = "";
            updateCharacterCount();
        }

        // Display error messages in a Bootstrap Alert
        function displayError(message) {
            const errorMessageElement = document.getElementById("errorMessage");
            errorMessageElement.innerText = message;
            errorMessageElement.classList.remove("d-none");
        }

        // Update the character counter
        function updateCharacterCount() {
            const inputText = document.getElementById("inputText").value;
            const charCount = inputText.length;
            document.getElementById("charCount").innerText = `${charCount} / 300 characters`;
        }

        // Initialize character count and auto-focus on page load
        document.addEventListener("DOMContentLoaded", function () {
            updateCharacterCount();
            const inputText = document.getElementById("inputText");
            if (inputText) {
                inputText.focus();
            }
        });

        // Handle paste events via keyboard (Ctrl+V, etc.)
        document.getElementById("inputText").addEventListener("paste", function () {
            setTimeout(() => {
                updateCharacterCount();
                processText(); // Trigger text processing after pasting
            }, 100);
        });
    </script>
</body>
</html>
