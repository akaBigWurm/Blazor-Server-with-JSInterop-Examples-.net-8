@page "/interopexample"
@rendermode InteractiveServer
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container my-4">
    <h3 class="mb-4">
        Text Processor
    </h3>

    <div class="mb-2">
        <textarea @bind="InputText"
                  @bind:event="oninput"
                  @ref="inputTextRef"
                  @onkeydown="HandleKeyDown"
                  @onpaste="HandlePaste"
                  class="form-control"
                  rows="2"
                  placeholder="Type your text here..."
                  maxlength="300">
        </textarea>
        <small class="form-text text-muted">@CharCount / 300 characters</small>
    </div>

    <div class="btn-group mb-3" role="group" aria-label="Action buttons">
        <button type="button" class="btn btn-secondary" @onclick="ClearInputText">Clear</button>
        <button type="button" class="btn btn-secondary" @onclick="PasteFromClipboard">Paste</button>
        <button type="button" class="btn btn-secondary" @onclick="ProcessText">Process Text</button>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }

    @if (IsLoading)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }

    @if (!string.IsNullOrEmpty(ProcessedText))
    {
        <div class="result-section mt-4">
            <h2 class="result-title">Processed Text:</h2>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Text</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@ProcessedText</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="CopyProcessedText">
                                Copy
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Include Bootstrap JS (optional, for interactive components) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        crossorigin="anonymous"></script>

<!-- JavaScript to handle Enter key press and focus management -->
<script>
    window.setupKeydownHandler = (element, dotNetHelper) => {
        if (element) {
            element.addEventListener('keydown', function (event) {
                if (event.code === 'Enter' || event.code === 'NumpadEnter') {
                    event.preventDefault(); // Prevent newline insertion
                    dotNetHelper.invokeMethodAsync('ProcessText')
                        .catch(error => console.error(error));
                }
            });
        } else {
            console.error('Element reference is null.');
        }
    };

    window.setFocus = (element) => {
        if (element) {
            element.focus();
        } else {
            console.error('Element reference is null.');
        }
    };
</script>

@code {
    private string InputText { get; set; } = string.Empty;
    private int CharCount => InputText.Length;
    private string ErrorMessage { get; set; }
    private bool IsLoading { get; set; } = false;
    private string ProcessedText { get; set; }

    private ElementReference inputTextRef;
    private DotNetObjectReference<InteropExample> dotNetHelperRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Create a DotNetObjectReference for JS interop with the correct type
            dotNetHelperRef = DotNetObjectReference.Create(this);
            // Invoke the JavaScript function to set up the keydown handler
            await JSRuntime.InvokeVoidAsync("setupKeydownHandler", inputTextRef, dotNetHelperRef);

            // Set initial focus via JS
            await JSRuntime.InvokeVoidAsync("setFocus", inputTextRef);
        }
    }

    public void Dispose()
    {
        // Dispose the DotNetObjectReference to prevent memory leaks
        dotNetHelperRef?.Dispose();
    }

    [JSInvokable]
    public async Task ProcessText()
    {
        ErrorMessage = string.Empty;
        ProcessedText = string.Empty;

        if (string.IsNullOrWhiteSpace(InputText))
        {
            ErrorMessage = "Please enter some text.";
            return;
        }

        IsLoading = true;
        StateHasChanged();

        try
        {
            // Simulate text processing with a mock method instead of a real API call
            // this could also be a call to c# method in a library or service or part of the project
            var result = await MockProcessText(InputText);

            ProcessedText = result.ProcessedText;
        }
        catch (Exception)
        {
            ErrorMessage = "An error occurred while processing your request.";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();

            // Set focus back to the textarea after "processing"
            await JSRuntime.InvokeVoidAsync("setFocus", inputTextRef);
        }
    }

    private Task<ProcessTextResult> MockProcessText(string text)
    {
        // For demonstration, prepend some label to the text
        var mockResult = new ProcessTextResult
            {
                ProcessedText = "Mock processed text: " + text
            };

        // Return the result as a completed Task
        return Task.FromResult(mockResult);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await ProcessText();
        }
    }

    private async Task HandlePaste(ClipboardEventArgs e)
    {
        // Schedule ProcessText to run after the paste event
        await InvokeAsync(async () =>
        {
            // Brief delay to ensure InputText is updated
            await Task.Delay(50);
            await ProcessText();
        });
    }

    private async Task PasteFromClipboard()
    {
        try
        {
            var text = await JSRuntime.InvokeAsync<string>("navigator.clipboard.readText");
            InputText = text.Length > 300 ? text[..300] : text;
            await ProcessText();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to paste: {ex.Message}";
        }
    }

    private async Task ClearInputText()
    {
        InputText = string.Empty;
        ProcessedText = string.Empty;
        ErrorMessage = string.Empty;

        // Set focus back to the textarea after clearing
        await JSRuntime.InvokeVoidAsync("setFocus", inputTextRef);
    }

    private async Task CopyProcessedText()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", ProcessedText);
            await JSRuntime.InvokeVoidAsync("alert", "Processed text copied to clipboard!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to copy text: {ex.Message}");
        }
    }

    public class ProcessTextResult
    {
        [JsonPropertyName("processed_text")]
        public string ProcessedText { get; set; }
    }
}
